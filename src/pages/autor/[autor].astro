---
// src/pages/autor/[autor].astro
// Esta página genera las páginas individuales para cada autor (ej. /autor/javier-rodriguez-perez)

import BlogCard from "@/components/BlogCard.astro";
import ImageMod from "@/components/ImageMod.astro";
// No importamos el componente Social.astro si no queremos mostrar las redes sociales
// import Social from "@/components/Social.astro"; 

import Base from "@/layouts/Base.astro"; // Layout base de tu plantilla
import { getSinglePage } from "@/lib/contentParser.astro"; // Para obtener posts de blog
import { slugify } from "@/lib/utils/textConverter"; // Para limpiar slugs de nombres
import { render } from "astro:content"; // Para renderizar el cuerpo del Markdown del autor
import { getCollection } from 'astro:content'; // Para obtener la colección de autores
import type { CollectionEntry } from 'astro:content'; // Para tipar CollectionEntry

// --- FUNCIÓN getStaticPaths: Genera las rutas para cada autor ---
export async function getStaticPaths() {
  const allAuthors = await getCollection('autores'); // Obtiene todos los autores de la colección 'autores'

  // Filtra autores que tengan un ID válido (para evitar errores)
  const validAuthors = allAuthors.filter(author => author.id);

  const paths = validAuthors.map(author => {
    // Genera el slug para la URL a partir del ID del archivo del autor
    // author.id es el nombre del archivo con extensión (ej. "javier-rodriguez-perez.md")
    const authorSlug = author.id.replace(/\.mdx?$/, ''); // Elimina .md o .mdx para un slug limpio
    
    return {
      params: {
        // 'autor' es el nombre del parámetro dinámico en la URL (ej. /autor/[autor])
        autor: authorSlug, // El slug limpio (ej. "javier-rodriguez-perez")
      },
      // Pasamos el objeto 'author' (CollectionEntry) completo como prop a la página
      props: { author: author as CollectionEntry<'autores'> }, 
    };
  });
  return paths;
}

// --- DESESTRUCTURACIÓN DE PROPS Y DATOS ---
const { autor } = Astro.params; // Capturamos el slug del autor de la URL (ej. "javier-rodriguez-perez")
const { author } = Astro.props; // Obtenemos el objeto 'author' (CollectionEntry) completo de las props

// Desestructuramos las propiedades del frontmatter del autor (author.data)
// Asegúrate de que estas propiedades existan en tu src/content.config.ts para la colección 'autores'
const { 
  title,       // Nombre del autor (ej. "Javier Rodríguez Pérez")
  meta_title, 
  description, // Biografía o descripción del autor
  image,       // Imagen del autor
  canonical,   // Propiedad 'canonical' del frontmatter (si existe)
  noindex      // Propiedad 'noindex' del frontmatter (si existe)
} = author.data; 

// Renderiza el cuerpo del Markdown del autor (biografía, etc.)
const { Content } = await render(author); 

// --- LÓGICA PARA METADATOS Y LAYOUT ---
// pageTitle: El título principal de la página, usado en el <h1> del layout.
const pageTitleForLayout = title; 

// URL Canónica:
// 1. Obtiene la URL base del sitio desde astro.config.mjs
const siteBaseUrl = Astro.site?.toString() || 'http://localhost:4321'; 
// 2. Construye la URL canónica automatizada usando el slug limpio del autor
const automatedCanonical = `${siteBaseUrl}autor/${autor}`; 
// 3. Prioriza la URL canónica del frontmatter del autor, si no, usa la automatizada
const finalCanonicalUrl = canonical || automatedCanonical; 

// NoIndex: Prioriza el frontmatter, si no, por defecto false (indexable).
const finalNoindex = noindex || false; 


// --- LÓGICA PARA OBTENER Y FILTRAR POSTS POR ESTE AUTOR ---
const BLOG_FOLDER = "blog"; // La colección de posts
const posts = await getSinglePage(BLOG_FOLDER); // Obtiene todos los posts del blog

// Filtra los posts para mostrar solo los de este autor
// Compara el slug del autor del post (post.data.author) con el slug del autor actual (title)
const postFilterByAuthor = posts.filter(
  (post) => slugify(post.data.author) === slugify(title)
);
---

<!-- --- LAYOUT Y CONTENIDO HTML DE LA PÁGINA DEL AUTOR --- -->
<Base
  title={title}          
  meta_title={meta_title}
  description={description}
  image={image}
  canonical={finalCanonicalUrl} 
  noindex={finalNoindex}       
  pageTitle={pageTitleForLayout} 
>
  <section class="section-sm pb-0">
    <div class="container">
      <div
        class="row justify-center border-b border-border pb-14 dark:border-darkmode-border"
      >
        <div class="text-center lg:col-8">
          {/* Imagen del autor */}
          {
            image && (
              <ImageMod
                src={image}
                class="mx-auto mb-10 rounded"
                height={200}
                width={200}
                alt={title}
                format="webp"
              />
            )
          }
          {/* Nombre/Título del autor */}
          <h1 class="h3 mb-6">{title}</h1>
          {/* Biografía del autor (contenido Markdown) */}
          <div class="content">
            <Content /> 
          </div>
          {/* No se renderizan redes sociales si se eliminó la prop 'social' */}
          {/* Si quieres redes sociales, debes añadirlas a src/content.config.ts y aquí */}
        </div>
      </div>

      {/* Sección de Posts del Autor */}
      <div class="row justify-center pb-16 pt-14">
        {
          postFilterByAuthor.length > 0 ? (
            postFilterByAuthor.map((post) => (
              <div class="mb-12 md:col-6 lg:col-4">
                <BlogCard data={post} />
              </div>
            ))
          ) : (
            <div class="w-full text-center py-10">
              <p>No se encontraron entradas de blog para este autor.</p>
            </div>
          )
        }
      </div>
    </div>
  </section>
</Base>